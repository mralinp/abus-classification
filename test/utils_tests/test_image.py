import numpy as np
from abus_classification.utils import image


def test_zero_pad_resize():
    x = np.ones([2,2], dtype=np.uint8)
    y = np.array([[0,0,0,0],
                  [0,1,1,0],
                  [0,1,1,0],
                  [0,0,0,0]], dtype=np.uint8)
    res = image.zero_pad_resize(x, size=(4,4))
    assert np.equal(res,y).all()
    
    
def test_rotate_image():
    x = np.array([[0,0,1],
                  [0,1,0], 
                  [1,0,0]], dtype=np.uint8)
    
    y = np.array([[1,0,0],
                  [0,1,0],
                  [0,0,1]], dtype=np.uint8)

    res = image.rotate_image(x, 90)
    assert np.equal(res, y).all()
    
    
def test_find_bbx():
    x = np.array([[0,0,0,0,0,0,0,0,0,0], 
                  [0,0,0,0,0,0,0,0,0,0], 
                  [0,0,0,0,0,0,0,0,0,0], 
                  [0,0,1,1,1,1,1,1,0,0], 
                  [0,0,1,1,1,1,1,1,0,0], 
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0]], dtype=np.uint8)
    
    a,b,w,h = image.find_bbx(x)
    
    assert a == 2 and b == 3 and w == 6 and h == 4
    
    
def test_find_center():    
    x = np.array([[0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,1,1,1,1,0,0,0],
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,0,1,1,1,1,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0]], dtype=np.uint8) * 255
    
    x, y = image.find_shape_center(x)
    
    print(x, y)
    
    assert y == 5 or y == 4
    assert x == 5 or x == 4

def test_get_boundary():
    
    x = np.array([[0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0],
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0]], dtype=np.uint8) * 255
    
    y = np.array([[0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,1,1,1,1,0,0,0],
                  [0,0,1,0,0,0,0,1,0,0],
                  [0,1,0,0,0,0,0,1,0,0],
                  [0,1,0,0,0,0,0,1,0,0],
                  [0,1,0,0,0,0,0,1,0,0],
                  [0,1,0,0,0,0,0,1,0,0],
                  [0,0,1,1,1,1,1,1,0,0],
                  [0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0]], dtype=np.uint8) * 255
    
    boundary = image.get_boundary(x)
    
    print(boundary/255)
    
    assert np.equal(boundary, y).all()
    
    
def test_find_surface_points_3d():
    x = np.zeros((5,5,5), dtype=np.uint8)
    x[1:4,1:4,1:4] = np.ones((1,1,1), dtype=np.uint8)
    y = np.array([(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), 
                  (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), 
                  (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), 
                  (1, 0, 0), (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), 
                  (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), 
                  (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (0, 0, 0), 
                  (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), 
                  (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), 
                  (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), 
                  (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), 
                  (1, 0, 0), (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), 
                  (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), 
                  (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (0, 0, 0), 
                  (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), 
                  (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), 
                  (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), 
                  (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), 
                  (1, 0, 0), (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), 
                  (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), 
                  (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (0, 0, 0), 
                  (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), 
                  (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), 
                  (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), 
                  (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), 
                  (1, 0, 0), (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), 
                  (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), 
                  (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (0, 0, 0), 
                  (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), 
                  (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), 
                  (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), 
                  (1, 0, 1), (1, 1, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), 
                  (1, 0, 0), (1, 0, 1), (1, 1, 0)], dtype=np.uint)
    
    res = image.find_surface_points_3d(x)
    
    assert len(res) == len(y)
    
    for i in range(len(res)):
        assert (res[i] == y[i]).all()
    
    